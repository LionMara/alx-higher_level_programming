==============================
matrix_divided(matrix, div):
==============================

This is a library function for
matrix_divided()
The function takes in two args
* a list
* an integer for division

=============================


Checking if its a list of list
containing ints and floats
==============================
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided([[1,2,3], [4,5,'6']], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Checking if rows are equal
==========================
	>>> matrix_divided([[1,2], [3,4,5]], 3)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

checking if div is a number -- integer or float
================================================
	>>> matrix_divided([[1,2,3], [4,5,6]], '6')
	Traceback (most recent call last):
	...
	TypeError: div must be a number

Division by zero Error
=======================
	>>> matrix_divided([[1,2,3], [4,5,6]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero


passed tests
===========
	>>> matrix_divided([[1,2,3], [4,5,6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> try:
	...     matrix_divided([[]], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	matrix must be a matrix (list of lists) of integers/floats
	>>> try:
	...     matrix_divided([], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	matrix must be a matrix (list of lists) of integers/floats
	>>> try:
	...     matrix_divided([(1, 2)], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	matrix must be a matrix (list of lists) of integers/floats
	>>> try:
	...     matrix_divided([7], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	matrix must be a matrix (list of lists) of integers/floats
	>>> try:
	...     matrix_divided([['7', '9']], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	matrix must be a matrix (list of lists) of integers/floats
	>>> try:
	...     matrix_divided([[1, 4], [18, 9], 3], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	matrix must be a matrix (list of lists) of integers/floats
	>>> try:
	...     matrix_divided([[7, 9, 12], [5], [1, 2, 3]], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	Each row of the matrix must have the same size
	>>> try:
	...     matrix_divided([[7, 9, 12], [1, 2, 3], [7, 13, 15, 18]], 3)
	... except TypeError as ex:
	...     print(ex.args[0])
	Each row of the matrix must have the same size
	>>> try:
	...     matrix_divided([[4]], '2')
	... except TypeError as ex:
	...     print(ex.args[0])
	div must be a number
	>>> try:
	...     matrix_divided([[4]], b'2')
	... except TypeError as ex:
	...     print(ex.args[0])
	div must be a number
	>>> try:
	...     matrix_divided([[4, 7]], 0)
	... except ZeroDivisionError as ex:
	...     print(ex.args[0])
	division by zero
	>>> try:
	...     matrix_divided([[4, 7]])
	... except Exception as ex:
	...     print(ex.args[0])
	matrix_divided() missing 1 required positional argument: 'div'
	>>> try:
	...     matrix_divided()
	... except Exception as ex:
	...     print(ex.args[0])
	matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
	
