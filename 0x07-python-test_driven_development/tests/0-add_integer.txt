=====================================
Tests for the 0-add_integer.py module
=====================================

This module is simple.
It adds two integers

the two values must be float or integers
Or a TypeError is passed.

add_integer = __import__('0-add_integer').add_integer.

``add_integers`` is expected to add the ints.

::

Ints - positive, one is negative, all are negative
==================================================

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 3)
	4
	>>> add_integer(-1, 3)
	2
	>>> add_integer(-1, -3)
	-4

Floats
======
	>>> add_integer(2.0, 3)
	5
	>>> add_integer(2.0, 3.0)
	5
OverflowError
============
	>>> add_integer(2.0*1000, 34e3**10000)
	Traceback (most recent call last):
	OverflowError: (34, 'Numerical result out of range')

NaN ValueError
==============
	>>> add_integer(float('NaN')), 2.0)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer


TypeError
=========
	>>> add_integer('a', 3)
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add_integer(3, 'b')
	Traceback (most recent call last):
	TypeError: b must be an integer
